
# ------------------------ 以下是 mysql jdbc 驱动 connector/j 的设置 -----------------------

## 一个 mysql 连接，如果建立不了，多久就要返回？如果不设置，有可能永远不返回。建议设置一个比较小的值，毕竟数据库服务器都是在内网的
## connector/j 中的默认值为 ，建议设置成 5 秒
mysql.connectTimeout=5000

## 查询发送到服务器以后，服务器多久不返回，就应该认为出问题了。对于 web 应用，建议设置在60秒以内。但是，如果使用了连接池，而且连接池也配置了 removeAbandonedTimeout，那么，这个值主要的目的就变成了在连接池内部做一些校验时，服务器如果长时间没有返回，就报错。建议这个值设置的比 removeAbandonedTimeout 稍微大一些
## connector/j 中的默认值为 ，建议设置成 90 秒
mysql.socketTimeout=90000

## mysql 连接出问题时，是否内部做自动重连，如果 autoReconnectForPools 为 true，设置连接的 autoCommit 时，此开关也会自动设置成 true。如果出现 spring 的连接泄露，即 TransactionSynchronizationManager 中的 ThreadLocal 最终没有释放连接，那么可以考虑开启此开关。
## connector/j 中的默认值为 false
# mysql.autoReconnect=true

## 如果连接的 autoCommit 被设置成 false，那么设置 autoReconnect 就不够用了，需要把 autoReconnectForPools 打开
## connector/j 中的默认值为 false
# mysql.autoReconnectForPools=true

## useLocalSessionState 
## 如果使用SQL来设置 auto commit状态，隔离级别等，那么完全相信本地的 JDBC 连接的状态是没有问题的
## 建议一般应用都开启此选项，这样应用程序与MySQL直觉的来回就可以减少很多
## connector/j 中的默认值是 false
mysql.useLocalSessionState=true

## 每次重连等待多久？ 默认是 2 秒
## connector/j 中的默认值为 2，单位是 秒
# mysql.initialTimeout=2

## connector/j 可以将 “batch insert” 重写成更高效的 一个 insert，多个values的形式，对于可重复的数据库更新，建议用多线程+小事务来完成，这样 rewriteBatchedStatements 也就没有必要设置了。否则，设置成 true 可以改善插入性能。
## connector/j 中的默认值为 false
# mysql.rewriteBatchedStatements=true

## connector/j 默认使用 client 端的 prepare statements。当然，不管是 client 端，还是 server 端的 prepare statements，缓存sql的解析结果，可以省掉一些开销，用内存换cpu。如果有比较多的 in 查询，且参数不固定，那么，缓存的效果可能就没有那么好。
## connector/j 中的默认值为 false
# mysql.cachePrepStmts=true

## 每个 connection 可以缓存几个 sql 语句
## connector/j 中的默认值为 25
# mysql.prepStmtCacheSize=25

## 每个 connection 可以缓存的最大 sql 语句是多大
## connector/j 中的默认值为 256
# mysql.prepStmtCacheSqlLimit=256

## connector/j 的 queryTimeout 是基于 Timer 实现的，现在最新版的驱动，会为每个设置了 queryTimeout 的 connection 开启一个 timer 线程，如果时间到了查询还没结束，那么这个查询会被 kill 掉。如果程序中有人使用了 queryTimeout，从而导致了内存泄露或者线程过多导致了内存压力，那么可以用这个开关关闭 queryTimeout 功能。
## connector/j 中的默认值为 true
# mysql.enableQueryTimeouts=true

datasource.url=jdbc:mysql://${dbHost}/${dbName}?autoReconnectForPools=${mysql.autoReconnectForPools}&useLocalSessionState=${mysql.useLocalSessionState}&connectTimeout=${mysql.connectTimeout}&socketTimeout=${mysql.socketTimeout}

# ---------------- 以下是连接池的设置 ------------------------

## 用户名和密码，后面可以对密码进行加密，然后由 spring boot 加载时，再给它解密，这样会更安全
datasource.username=darcy
datasource.password=TsRAScf1aTojt1

## 数据库驱动
datasource.driverClassName=com.mysql.jdbc.Driver

## 从连接池取出连接时，跟服务器确认下连接的有效性。MySQL 服务器默认保持连接的时长（WAIT_TIMEOUT）为 8 小时，如果8小时连接没有任何动作，连接会被 MySQL 服务器关闭。
## 也可以用定时检查空闲连接的方式来解决这个问题；只是取出时检查会更加简单直接。
## 默认值为 false
datasource.testOnBorrow=true

## 设置检查连接有效性的查询，用一个最简单的查询即可
datasource.validationQuery=select 1

## 有效性检查时间间隔。检查连接时，如果在此间隔内已经检查过，那么就不检查了。如果希望更好的性能，这个值可以设置的稍微大一些，比如 60 秒
## testOnBorrow/testOnReturn/testOnIdle 这个3个检查都使用此间隔检查连接
## 如果连接会闪断，此 interval 最好设置小一点，或者打开 autoReconnect 或者 autoReconnectForPools
## 默认值为 3000，单位是 毫秒
datasource.validationInterval=60000

## 需要将长期没有还回来的连接关闭吗？
## 建议 web 应用开启此开关，updater中如果有大事务，就不能打开此开关 
## 默认值为 false
datasource.removeAbandoned=true

## 几秒钟以后，如果连接还没有还回来，就认为是有问题了
## 默认值为 60，单位是 秒
# datasource.removeAbandonedTimeout=60

## 如果有连接因为长时间没有还回来而被关闭，需要将之前获取此连接时的堆栈输出到日志吗？ 
## 建议有连接泄露问题时，将此开关打开；这样就很容易发现是在哪里泄露的了。
## 默认值为 false
# datasource.logAbandoned=false

## 连接的缺省 autoCommit 值
## 事务开始之前，spring 都会把一个连接的 autoCommit 设置成 false，完了以后，再设置回 true，这样，一个事务跟服务器之间就多了两个来回，建议将此项设置成false，当然，前提是所有数据库相关操作都封装在事务中，否则问题将比较严重。
## 默认值为 null
datasource.defaultAutoCommit=false

## 连接池的最大连接数是多少
## 默认值为 100
datasource.maxActive=100
datasource.maxIdle=${datasource.maxActive}

## 初始连接池大小
## 对于繁忙的web应用，建议设置的稍微大些，否则，nginx 将流量切过来的时候，连接池中连接数目太少
## 默认值为 10
datasource.initialSize=50

## 默认值为 10
datasource.minIdle=${datasource.initialSize}

## 连接用完时，等待多长时间应该返回
## 对于 web 应用，建议将 maxWait 设置成 100 毫秒以下，如果连接用完，立即回复错误，否则用户会不断刷新，然后耗尽服务器的线程
## 默认值为 30000，单位是 毫秒
datasource.maxWait=100

## 一个连接变为 idle 时，多久以后应该就它关闭
## 默认值为 60000，单位是 毫秒
# datasource.minEvictableIdleTimeMillis=600000


# -------- 以下是 spring data jpa 和 hibernate 的设置 -------

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.cache.use_second_level_cache=false

## 以下两项用于设置 hibernate 的 ID generator
## hibernate 5 以后，第二项默认为true，spring boot为了保持与hibernate之前的版本一致
## 又加了第一项，第一项的默认配置为false
## 对我们大部分项目来说，应该设置为 true
spring.jpa.hibernate.use-new-id-generator-mappings=true
spring.jpa.properties.hibernate.id.new_generator_mappings=true

## jdbc batch 的size，100以内就好
spring.jpa.properties.hibernate.jdbc.batch_size=100

## 懒加载的时候，批量 fetch 多少合适？
spring.jpa.properties.hibernate.default_batch_fetch_size=50

## 懒加载的时候，批量 fetch 采用何种模式？
spring.jpa.properties.hibernate.batch_fetch_style=dynamic

## 使用 multi tenant 时，即 datasource 按动态选择时，设置为false
## 这样，程序启动时 hibernate 就不会去检查 mysql 的 metadata
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

## 使用 hibernate 保存数据时，如果两种或多种数据交错保存，那么就没法使用 batch udpate
## 这个时候可以让 hibernate 对 inserts 和 updates 进行排序，这样就可以用到 jdbc batch 啦
## 但开启这个可能有别的副作用，建议谨慎开启，修改代码更重要
## 以下两项的默认值为 false，若要开启，可以设置为 true
# spring.jpa.properties.hibernate.order_updates=false
# spring.jpa.properties.hibernate.order_inserts=false


